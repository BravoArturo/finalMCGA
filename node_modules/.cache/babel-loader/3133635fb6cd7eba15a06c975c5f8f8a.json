{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lautaro Garello\\\\Desktop\\\\finalMCGA-tasks\\\\src\\\\components\\\\screens\\\\Task\\\\TaskForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport * as TaskService from './TaskService';\nimport { useParams } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskForm = () => {\n  _s();\n\n  const params = useParams();\n  console.log(params);\n  const initalState = {\n    title: '',\n    description: '',\n    deadline: ''\n  };\n  const [task, settask] = useState(initalState);\n\n  const hadleInputChange = e => {\n    settask({ ...task,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault(); //we cancelled the default behavior\n\n    if (!params.id) {\n      const res = await TaskService.createTask(task);\n      toast.success('New Task added');\n      console.log(res.data);\n      settask(initalState);\n    } else {\n      await TaskService.updatedTask(params.id, task);\n      toast.success('Task updated');\n    }\n  };\n\n  const getTask = async id => {\n    const res = await TaskService.getTask(id);\n    const {\n      title,\n      description,\n      deadline\n    } = res.data;\n    settask({\n      title,\n      description,\n      deadline\n    });\n  };\n\n  useEffect(() => {\n    if (params.id) getTask(params.id);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"New Task\", /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"title\",\n          placeholder: \"Write a title for this task\",\n          autoFocus: true,\n          onChange: hadleInputChange,\n          value: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"description\",\n          placeholder: \"Please enter a description\",\n          onChange: hadleInputChange,\n          value: task.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          name: \"deadline\",\n          placeholder: \"Please enter a deadline\",\n          onChange: hadleInputChange,\n          value: task.deadline\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), params.id ? /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Updated task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskForm, \"xTzlKRFbbHDN7skoouQ+a+e7kNc=\", false, function () {\n  return [useParams];\n});\n\n_c = TaskForm;\nexport default TaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"sources":["C:/Users/Lautaro Garello/Desktop/finalMCGA-tasks/src/components/screens/Task/TaskForm.tsx"],"names":["React","useState","useEffect","toast","TaskService","useParams","TaskForm","params","console","log","initalState","title","description","deadline","task","settask","hadleInputChange","e","target","name","value","handleSubmit","preventDefault","id","res","createTask","success","data","updatedTask","getTask"],"mappings":";;;AAAA,OAAOA,KAAP,IAAwCC,QAAxC,EAAkDC,SAAlD,QAAmE,OAAnE;AACA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AACA,SAASC,SAAT,QAA0B,cAA1B;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAKnB,QAAMC,MAAM,GAAGF,SAAS,EAAxB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAMG,WAAW,GAAG;AAACC,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,WAAW,EAAE,EAAzB;AAA6BC,IAAAA,QAAQ,EAAE;AAAvC,GAApB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAOS,WAAP,CAAhC;;AAEA,QAAMM,gBAAgB,GAAIC,CAAD,IAA4D;AACjFF,IAAAA,OAAO,CAAC,EAAC,GAAGD,IAAJ;AAAU,OAACG,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAApC,KAAD,CAAP;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAG,MAAOJ,CAAP,IAAyC;AAC1DA,IAAAA,CAAC,CAACK,cAAF,GAD0D,CACtC;;AAEpB,QAAG,CAACf,MAAM,CAACgB,EAAX,EAAc;AACV,YAAMC,GAAG,GAAG,MAAMpB,WAAW,CAACqB,UAAZ,CAAuBX,IAAvB,CAAlB;AACAX,MAAAA,KAAK,CAACuB,OAAN,CAAc,gBAAd;AACAlB,MAAAA,OAAO,CAACC,GAAR,CAAYe,GAAG,CAACG,IAAhB;AACAZ,MAAAA,OAAO,CAACL,WAAD,CAAP;AACH,KALD,MAKK;AACD,YAAMN,WAAW,CAACwB,WAAZ,CAAwBrB,MAAM,CAACgB,EAA/B,EAAmCT,IAAnC,CAAN;AACAX,MAAAA,KAAK,CAACuB,OAAN,CAAc,cAAd;AACH;AAEJ,GAbD;;AAeA,QAAMG,OAAO,GAAG,MAAON,EAAP,IAAsB;AAClC,UAAMC,GAAG,GAAG,MAAMpB,WAAW,CAACyB,OAAZ,CAAoBN,EAApB,CAAlB;AACA,UAAM;AAACZ,MAAAA,KAAD;AAAQC,MAAAA,WAAR;AAAqBC,MAAAA;AAArB,QAAiCW,GAAG,CAACG,IAA3C;AACAZ,IAAAA,OAAO,CAAC;AAACJ,MAAAA,KAAD;AAAOC,MAAAA,WAAP;AAAmBC,MAAAA;AAAnB,KAAD,CAAP;AACH,GAJD;;AAKAX,EAAAA,SAAS,CAAC,MAAK;AACX,QAAIK,MAAM,CAACgB,EAAX,EAAeM,OAAO,CAACtB,MAAM,CAACgB,EAAR,CAAP;AAClB,GAFQ,EAEN,EAFM,CAAT;AAGA,sBACI;AAAA,wCAEI;AAAM,MAAA,QAAQ,EAAEF,YAAhB;AAAA,8BACI;AAAA,gCACA;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,OAAxB;AAAgC,UAAA,WAAW,EAAC,6BAA5C;AAA0E,UAAA,SAAS,MAAnF;AAAoF,UAAA,QAAQ,EAAEL,gBAA9F;AAAgH,UAAA,KAAK,EAAEF,IAAI,CAACH;AAA5H;AAAA;AAAA;AAAA;AAAA,gBADA,eAEA;AAAU,UAAA,IAAI,EAAC,aAAf;AAA6B,UAAA,WAAW,EAAC,4BAAzC;AAAsE,UAAA,QAAQ,EAAEK,gBAAhF;AAAkG,UAAA,KAAK,EAAEF,IAAI,CAACF;AAA9G;AAAA;AAAA;AAAA;AAAA,gBAFA,eAGA;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,UAAxB;AAAmC,UAAA,WAAW,EAAC,yBAA/C;AAAyE,UAAA,QAAQ,EAAEI,gBAAnF;AAAqG,UAAA,KAAK,EAAEF,IAAI,CAACD;AAAjH;AAAA;AAAA;AAAA;AAAA,gBAHA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAOQN,MAAM,CAACgB,EAAP,gBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,gBAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVR;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBH,CAvDD;;GAAMjB,Q;UAKaD,S;;;KALbC,Q;AAyDN,eAAeA,QAAf","sourcesContent":["import React, { ChangeEvent, FormEvent, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport Task from './Task';\nimport * as TaskService from './TaskService'\nimport { useParams } from 'react-router';\n\nconst TaskForm = () => {\n\n    interface Params {\n        id: string;\n    }\n    const params = useParams<Params>();\n    console.log(params);\n    const initalState = {title: '', description: '', deadline: ''};\n    const [task, settask] = useState<Task>(initalState);\n\n    const hadleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        settask({...task, [e.target.name]: e.target.value})\n    };\n\n    const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault(); //we cancelled the default behavior\n\n        if(!params.id){\n            const res = await TaskService.createTask(task);\n            toast.success('New Task added');\n            console.log(res.data);\n            settask(initalState);\n        }else{\n            await TaskService.updatedTask(params.id, task);\n            toast.success('Task updated');\n        }\n\n    };\n\n    const getTask = async (id: string) => {\n        const res = await TaskService.getTask(id);\n        const {title, description, deadline} = res.data;\n        settask({title,description,deadline});\n    }\n    useEffect(()=> {\n        if (params.id) getTask(params.id);\n    }, [])\n    return (\n        <div>\n            New Task\n            <form onSubmit={handleSubmit}>\n                <div>\n                <input type=\"text\" name=\"title\" placeholder=\"Write a title for this task\" autoFocus onChange={hadleInputChange} value={task.title}></input>\n                <textarea name=\"description\" placeholder=\"Please enter a description\" onChange={hadleInputChange} value={task.description}></textarea>\n                <input type=\"date\" name=\"deadline\" placeholder=\"Please enter a deadline\" onChange={hadleInputChange} value={task.deadline}></input>\n                </div>\n                {\n                    params.id?\n                    <button>Updated task</button>\n                    :\n                    <button>Create task</button>\n                }\n            </form>\n        </div>\n    )\n}\n\nexport default TaskForm;\n"]},"metadata":{},"sourceType":"module"}